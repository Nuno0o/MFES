class Delegation
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	private name: seq of char;
	private stocks : map Product`Type to real;
	private customers : set of Consumer;
	private baskets : map Basket to Consumer;
	inv rng baskets subset customers;
operations
	public Delegation: seq of char ==> Delegation
	Delegation(N) == (name := N;stocks := { |-> };customers := {};baskets := { |-> };return self);
	
	--Add a product
	public addProduct: Product`Type ==> ()
	addProduct(P) == (stocks := stocks munion {P |-> 0};)
	pre P not in set(dom stocks)
	post P in set(dom stocks);
	
	--Remove a product
	public removeProduct: Product`Type ==> ()
	removeProduct(P) == (stocks := {P} <-: stocks)
	pre P in set(dom stocks) 
	post P not in set(dom stocks);
	
	--Get product list
	public getProducts: () ==> set of Product`Type
	getProducts() == (return dom stocks);
	
	--Add stock to a product
	public addProductStock: Product`Type * real ==> ()
	addProductStock(P,S) == (stocks := stocks ++ {P |-> stocks(P) + S})
	pre P in set(dom stocks) and S >= 0
	post stocks(P) >= S;
	
	--Remove stock from a product
	public removeProductStock: Product`Type * real ==> ()
	removeProductStock(P,S) == (stocks := stocks ++ {P |-> stocks(P) - S})
	pre P in set(dom stocks) and S >= 0 and S <= stocks(P)
	post stocks(P) >= 0;
	
	--Get stock of a product
	public getStock: Product`Type ==> real
	getStock(P) == (return stocks(P))
	pre P in set(dom stocks);
	
	--Give baskets to consumers
	public giveBaskets: () ==> ()
	giveBaskets() == (
		for all basket in set (dom baskets) do(
			baskets(basket).addBasket(basket);
		);
		baskets := { |-> };
	)
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Delegation