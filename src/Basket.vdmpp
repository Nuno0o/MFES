class Basket
types
public MaxSize = real inv n == n = 4 or n = 8;--Cesta grande ou pequena
values
instance variables
	public maxSize : MaxSize;
	public products : map Product`Type to Product`Stock;
	inv totalWeight(products) <= maxSize;
operations
	public Basket: MaxSize ==> Basket
	Basket(MaxSize) == (maxSize := MaxSize ; products := { |-> });
	
	--Add a product
	public addProduct: Product`Type ==> ()
	addProduct(P) == (products := products munion {P |-> 0};)
	pre P not in set(dom products)
	post P in set(dom products);
	
	--Remove a product
	public removeProduct: Product`Type ==> ()
	removeProduct(P) == (products := {P} <-: products)
	pre P in set(dom products) 
	post P not in set(dom products);
	
	--Get product list
	public getProducts: () ==> set of Product`Type
	getProducts() == (return dom products);
	
	--Add stock to a product
	public addProductStock: Product`Type * real ==> ()
	addProductStock(P,S) == (products := products ++ {P |-> products(P) + S})
	pre P in set(dom products) and S >= 0
	post products(P) >= S;
	
	--Remove stock from a product
	public removeProductStock: Product`Type * real ==> ()
	removeProductStock(P,S) == (products := products ++ {P |-> products(P) - S})
	pre P in set(dom products) and S >= 0 and S <= products(P)
	post products(P) >= 0;
	
	--Get stock of a product
	public getStock: Product`Type ==> real
	getStock(P) == (return products(P))
	pre P in set(dom products);
functions
	--Total weight of products
	public totalWeight: map Product`Type to Product`Stock -> real
	totalWeight(Products) == (
		if Products = { |-> } then 0 else let s in set dom Products in Products(s) + totalWeight({s} <-: Products)
	);
traces
-- TODO Define Combinatorial Test Traces here
end Basket